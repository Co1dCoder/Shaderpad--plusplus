acos{{
类型:三角函数
原型:genType acos(genType x);
描述:acos — return the arccosine of the parameter
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
acosh{{
类型:三角函数
原型:genType acosh(genType x); 
描述:acosh — return the arc hyperbolic cosine of the parameter
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
asin{{
类型:三角函数
原型:genType asin(genType x);
描述:asin — return the arcsine of the parameter
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
asinh{{
类型:三角函数
原型:genType asinh(genType x); 
描述:asinh — return the arc hyperbolic sine of the parameter
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
atan{{
类型:三角函数
原型:
genType atan(genType y, genType x); 
genType atan(genType y_over_x); 
描述:atan — return the arc-tangent of the parameters
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
atanh{{
类型:三角函数
原型:genType atanh(genType x);
描述:atanh — return the arc hyperbolic tangent of the parameter
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
cos{{
类型:三角函数
原型:genType cos(genType angle); 
描述:cos — return the cosine of the parameter
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
cosh{{
类型:三角函数
原型:genType cosh(genType x);  
描述:cosh — return the hyperbolic cosine of the parameter
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
degrees{{
类型:三角函数
原型:genType degrees(genType radians); 
描述:degrees — convert a quantity in radians to degrees
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
radians{{
类型:三角函数
原型:genType radians(genType degrees);  
描述:radians — convert a quantity in degrees to radians
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
sin{{
类型:三角函数
原型:genType sin(genType angle);   
描述:sin — return the sine of the parameter
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
sinh{{
类型:三角函数
原型:genType sinh(genType x);    
描述:sinh — return the hyperbolic sine of the parameter
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
适用范围:所有着色器
}}
tan{{
类型:三角函数
原型:genType tan(genType angle);     
描述:tan — return the tangent of the parameter
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
tanh{{
类型:三角函数
原型:genType tanh(genType x);      
描述:tanh — return the hyperbolic tangent of the parameter
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
abs{{
类型:数学函数
原型:
genType abs(genType x); 
描述:abs — return the absolute value of the parameter
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
适用范围:所有着色器
}}
clamp{{
类型:数学函数
原型:
genType clamp(genType x,genType minVal, genType maxVal);
genType clamp(genType x,float minVal, float maxVal); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType clamp(genDType x,genDType minVal, genDType maxVal); 
genDType clamp(genDType x,double minVal, double maxVal);
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
genIType clamp(genIType x,genIType minVal,genIType maxVal); 
genIType clamp(genIType x,int minVal,int maxVal);  
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
genUType clamp(genUType x,genUType minVal,genUType maxVal); 
genUType clamp(genUType x,uint minVal,uint maxVal); 
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
描述:clamp — constrain a value to lie between two further values
适用范围:所有着色器
}}
dFdx{{
类型:数学函数
原型:
genType dFdx(genType p);  
genType dFdy(genType p);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
genType dFdxCoarse(genType p);  
genType dFdyCoarse(genType p);  
genType dFdxFine(genType p);  
genType dFdyFine(genType p); 
支持版本:4.50  
描述:dFdx, dFdy — return the partial derivative of an argument with respect to x or y
适用范围:所有着色器
}}
dFdy{{
类型:数学函数
原型:
genType dFdx(genType p);  
genType dFdy(genType p);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
genType dFdxCoarse(genType p);  
genType dFdyCoarse(genType p);  
genType dFdxFine(genType p);  
genType dFdyFine(genType p); 
支持版本:4.50  
描述:dFdx, dFdy — return the partial derivative of an argument with respect to x or y
适用范围:所有着色器
}}
exp{{
类型:数学函数
原型:genType exp(genType x); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:exp — return the natural exponentiation of the parameter
适用范围:所有着色器
}}
exp2{{
类型:数学函数
原型:genType exp2(  genType x); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:exp2 — return 2 raised to the power of the parameter
适用范围:所有着色器
}}
floor{{
类型:数学函数
原型:
genType floor(genType x);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType floor(genDType x);
支持版本:4.00 4.10 4.20 4.30 4.40 4.50  
描述:floor — find the nearest integer less than or equal to the parameter
适用范围:所有着色器
}}
fma{{
类型:数学函数
原型:
genType fma(genType a,genType b,genType c);
genDType fma(genDType a,genDType b,genDType c);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50  
描述:fma — perform a fused multiply-add operation
适用范围:所有着色器
}}
fract{{
类型:数学函数
原型:
genType fract(genType x);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType fract(genDType x); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:fract — compute the fractional part of the argument
适用范围:所有着色器
}}
fwidth{{
类型:数学函数
原型:
genType fwidth(genType p);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
genType fwidthCoarse(genType p);  
genType fwidthFine(genType p); 
支持版本:4.50  
描述:fwidth — return the sum of the absolute value of derivatives in x and y
适用范围:所有着色器
}}
inversesqrt{{
类型:数学函数
原型:
genType inversesqrt(genType x);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
genDType inversesqrt(genDType x); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50  
描述:inversesqrt — return the inverse of the square root of the parameter
适用范围:所有着色器
}}
isinf{{
类型:数学函数
原型:
genBType isinf(genType x); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genBType isinf(genDType x); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:isinf — determine whether the parameter is positive or negative infinity
适用范围:所有着色器
}}
isnan{{
类型:数学函数
原型:
genBType isnan(genType x);  
genBType isnan(genDType x);   
支持版本:1.10 1.20 1.
描述:isnan — determine whether the parameter is a number
适用范围:所有着色器
}}
log{{
类型:数学函数
原型:
genType log(genType x);   
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:log — return the natural logarithm of the parameter
适用范围:所有着色器
}}
log2{{
类型:数学函数
原型:
genType log2(genType x);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:log2 — return the base 2 logarithm of the parameter
适用范围:所有着色器
}}
max{{
类型:数学函数
原型:
genType max(genType x,genType y);  
genType max(genType x,float y);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType max(genDType x,genDType y);  
genDType max(genDType x,double y); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
genIType max(genIType x,genIType y);  
genIType max(genIType x,int y);  
genUType max(genUType x,genUType y);  
genUType max(genUType x,uint y);   
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:max — return the greater of two values
适用范围:所有着色器
}}
min{{
类型:数学函数
原型:
genType min(genType x,genType y);  
genType min(genType x,float y);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType min(genDType x,genDType y);  
genDType min(genDType x,double y);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
genIType min(genIType x,genIType y);  
genIType min(genIType x,int y);  
genUType min(genUType x,genUType y);  
genUType min(genUType x,uint y);  
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:min — return the lesser of two values
适用范围:所有着色器
}}
mix{{
类型:数学函数
原型:
genType mix(genType x,genType y,genType a);  
genType mix(genType x,genType y,float a);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType mix(genDType x,genDType y,genDType a);  
genDType mix(genDType x,genDType y,double a); 
genDType mix(genDType x,genDType y,genBType a);
支持版本:4.00 4.10 4.20 4.30 4.40 4.50   
genType mix(genType x,genType y,genBType a);    
genIType mix(genIType x,genIType y,genBType a);  
genUType mix(genUType x,genUType y,genBType a);  
genBType mix(genBType x,genBType y,genBType a); 
支持版本:4.50   
描述:mix — linearly interpolate between two values
适用范围:所有着色器
}}
mod{{
类型:数学函数
原型:
genType mod(genType x,float y);  
genType mod(genType x,genType y);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
genDType mod(genDType x,double y);  
genDType mod(genDType x,genDType y);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50  
描述:mod — compute value of one parameter modulo another
适用范围:所有着色器
}}
modf{{
类型:数学函数
原型:
genType modf(genType x,out genType i); 
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
genDType modf(genDType x,out genDType i);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50  
描述:modf — separate a value into its integer and fractional components	
适用范围:所有着色器
}}
noise{{
类型:数学函数
原型:
float noise1(genType x);
vec2 noise2(genType x);
vec3 noise3(genType x);
vec4 noise4(genType x);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:noise — generate values with a pseudo-random noise function	
适用范围:所有着色器
}}
pow{{
类型:数学函数
原型:
genType pow(genType x,genType y);   
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:pow — return the value of the first parameter raised to the power of the second
适用范围:所有着色器
}}
round{{
类型:数学函数
原型:
genType round(genType x); 
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType round(genDType x);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:round — find the nearest integer less than or equal to the parameter
适用范围:所有着色器
}}
roundEven{{
类型:数学函数
原型:
genType roundEven(genType x);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50
genDType roundEven(genDType x);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:roundEven — find the nearest even integer to the parameter
适用范围:所有着色器
}}
sign{{
类型:数学函数
原型:
genType sign(genType x);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
genIType sign(genIType x);
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType sign(genDType x);
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:sign — extract the sign of the parameter
适用范围:所有着色器
}}
smoothstep{{
类型:数学函数
原型:
genType smoothstep(genType edge0,genType edge1,genType x);  
genType smoothstep(float edge0,float edge1,genType x); 
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
genDType smoothstep(genDType edge0,genDType edge1,genDType x);  
genDType smoothstep(double edge0,double edge1,genDType x); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:smoothstep — perform Hermite interpolation between two values
适用范围:所有着色器
}}
sqrt{{
类型:数学函数
原型:
genType sqrt(genType x);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType sqrt(genDType x);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:sqrt — return the square root of the parameter
适用范围:所有着色器
}}
step{{
类型:数学函数
原型:
genType step(genType edge,genType x);  
genType step(float edge,genType x); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
genDType step(genDType edge,genDType x);  
genDType step(double edge,genDType x);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:step — generate a step function by comparing two values
适用范围:所有着色器
}}
trunc{{
类型:数学函数
原型:
genType trunc(genType x);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
genDType trunc(genDType x);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:trunc — find the nearest integer less than or equal to the parameter
适用范围:所有着色器
}}
floatBitsToInt{{
类型:浮点数操作函数
原型:
genIType floatBitsToInt(genType x); 
genUType floatBitsToUint(genType x); 
支持版本:3.30 4.00 4.10 4.20 4.30 4.40 4.50  
描述:floatBitsToInt — produce the encoding of a floating point value as an integer
适用范围:所有着色器
}}
frexp{{
类型:浮点数操作函数
原型:
genType frexp(genType x,out genIType exp); 
genDType frexp(genDType x,out genIType exp);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:frexp — split a floating point number
适用范围:所有着色器
}}
intBitsToFloat{{
类型:浮点数操作函数
原型:
genType intBitsToFloat(genIType x);  
genType uintBitsToFloat(genUType x);   
支持版本:3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:intBitsToFloat, uintBitsToFloat — produce a floating point using an encoding supplied as an integer
适用范围:所有着色器
}}
ldexp{{
类型:浮点数操作函数
原型:
genType ldexp(genType x,genIType exp);  
genDType ldexp(genDType x,genIType exp);    
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:ldexp — assemble a floating point number from a value and exponent
适用范围:所有着色器
}}
packDouble2x32{{
类型:浮点数操作函数
原型:
double packDouble2x32(uvec2 v);   
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:packDouble2x32 — create a double-precision value from a pair of unsigned integers
适用范围:所有着色器
}}
packHalf2x16{{
类型:浮点数操作函数
原型:
uint packHalf2x16(  vec2 v);   
支持版本:4.20 4.30 4.40 4.50 
描述:packHalf2x16 — convert two 32-bit floating-point quantities to 16-bit quantities and pack them into a single 32-bit integer
适用范围:所有着色器
}}
packUnorm{{
类型:浮点数操作函数
原型:
uint packUnorm2x16(vec2 v); 
uint packUnorm4x8(vec4 v); 
uint packSnorm4x8(vec4 v);   
支持版本:4.10 4.20 4.30 4.40 4.50 
uint packSnorm2x16(vec2 v); 
支持版本:4.20 4.30 4.40 4.50 
描述:packUnorm — pack floating-point values into an unsigned integer
适用范围:所有着色器
}}
unpackDouble2x32{{
类型:浮点数操作函数
原型:
uvec2 unpackDouble2x32(double d); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:unpackDouble2x32 — produce two unsigned integers containing the bit encoding of a double precision floating point value
适用范围:所有着色器
}}
unpackHalf2x16{{
类型:浮点数操作函数
原型:
vec2 unpackHalf2x16(  uint v);  
支持版本:4.20 4.30 4.40 4.50 
描述:unpackHalf2x16 — convert two 16-bit floating-point values packed into a single 32-bit integer into a vector of two 32-bit floating-point quantities
适用范围:所有着色器
}}
unpackUnorm{{
类型:浮点数操作函数
原型:
vec2 unpackUnorm2x16(uint p);  
vec4 unpackUnorm4x8(uint p); 
vec4 unpackSnorm4x8(uint p); 
支持版本:4.10 4.20 4.30 4.40 4.50 
vec2 unpackSnorm2x16(uint p);
支持版本:4.20 4.30 4.40 4.50 
描述:unpackUnorm2x16, unpackUnorm4x8, unpackSnorm4x8 — unpack floating-point values from an unsigned integer
适用范围:所有着色器
}}
gl_ClipDistance{{
类型:内建变量
声明:
gl_ClipDistance is a member of the gl_PerVertex named block: 
    out gl_PerVertex {
        vec4 gl_Position;
        float gl_PointSize;
        float gl_ClipDistance[];
    };
In fragment shaders, it is intrinsically declared as: in float gl_ClipDistance[] ;
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_ClipDistance — provides a forward-compatible mechanism for vertex clipping
适用范围:1.30-1.40仅顶点着色器 1.50-3.30进顶点和几何着色器
}}
gl_CullDistance{{
类型:内建变量
声明:
gl_CullDistance is a member of the gl_PerVertex named block: 
    out gl_PerVertex {
        vec4 gl_Position;
        float gl_PointSize;
        float gl_ClipDistance[];
        float gl_CullDistance[];
    };
In fragment shaders, it is intrinsically declared as: in float gl_CullDistance[] ;
支持版本:4.50 
描述:gl_CullDistance — provides a mechanism for controlling user culling
适用范围:顶点和几何着色器
}}
gl_FragCoord{{
类型:内建变量
声明:in vec4 gl_FragCoord ; 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_FragCoord — contains the window-relative coordinates of the current fragment
适用范围:片元着色器
}}
gl_FragDepth{{
类型:内建变量
声明:out float gl_FragDepth ; 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_FragDepth — establishes a depth value for the current fragment
适用范围:片元着色器
}}
gl_FrontFacing{{
类型:内建变量
声明:in bool gl_FrontFacing ; 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_FrontFacing — indicates whether a primitive is front or back facing
适用范围:片元着色器
}}
gl_GlobalInvocationID{{
类型:内建变量
声明:in uvec3 gl_GlobalInvocationID ; 
支持版本:4.30 4.40 4.50 
描述:gl_GlobalInvocationID — contains the global index of work item currently being operated on by a compute shader
适用范围:计算着色器
}}
gl_HelperInvocation{{
类型:内建变量
声明:in bool gl_HelperInvocation ; 
支持版本:4.50 
描述:gl_HelperInvocation — indicates whether a fragment shader invocation is a helper invocation
适用范围:片元着色器
}}
gl_InstanceID{{
类型:内建变量
声明:in int gl_InstanceID ; 
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_InstanceID — contains the index of the current primitive in an instanced draw command
适用范围:顶点着色器
}}
gl_InvocationID{{
类型:内建变量
声明:in int gl_InvocationID ; 
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_InvocationID — contains the invocation index of the current shader
适用范围:1.50-3.30仅几何着色器
}}
gl_Layer{{
类型:内建变量
声明:
// Geometry stage
out int gl_Layer ; 
// Fragment stage
in int gl_Layer ; 
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_Layer — contains the selected layer of a multi-layer framebuffer attachment
适用范围:1.50-4.20仅几何着色器,4.30-4.50几何和片元着色器
}}
gl_LocalInvocationID{{
类型:内建变量
声明:in uvec3 gl_LocalInvocationID ; 
支持版本:4.30 4.40 4.50 
描述:gl_LocalInvocationID — contains the index of work item currently being operated on by a compute shader
适用范围:计算着色器
}}
gl_LocalInvocationIndex{{
类型:内建变量
声明:in uint gl_LocalInvocationIndex ; 
支持版本:4.30 4.40 4.50 
描述:gl_LocalInvocationIndex — contains the local linear index of work item currently being operated on by a compute shader
适用范围:计算着色器
}}
gl_NumSamples{{
类型:内建变量
声明:in bool gl_NumSamples ; 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_NumSamples — contains the total number of samples in the framebuffer
适用范围:片元着色器
}}
gl_NumWorkGroups{{
类型:内建变量
声明:in uvec3 gl_NumWorkGroups ; 
支持版本:4.30 4.40 4.50
描述:gl_NumWorkGroups — contains the number of workgroups that have been dispatched to a compute shader
适用范围:计算着色器
}}
gl_PatchVerticesIn{{
类型:内建变量
声明:in int gl_PatchVerticesIn ;  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_PatchVerticesIn — contains the number of vertices in the current patch
适用范围:细分着色器
}}
gl_PointCoord{{
类型:内建变量
声明:in vec2 gl_PointCoord ;
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_PointCoord — contains the coordinate of a fragment within a point
适用范围:片元着色器
}}
gl_PointSize{{
类型:内建变量
声明:
gl_PointSize is a member of the gl_PerVertex named block: 
    out gl_PerVertex {
        vec4 gl_Position;
        float gl_PointSize;
        float gl_ClipDistance[];
    };
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_PointSize — contains size of rasterized points, in pixels
适用范围:1.10-1.40仅顶点着色器,1.50-3.30仅顶点和几何着色器,4.00-4.50顶点、几何和细分着色器
}}
gl_Position{{
类型:内建变量
声明:
gl_Position is a member of the gl_PerVertex named block: 
    out gl_PerVertex {
        vec4 gl_Position;
        float gl_PointSize;
        float gl_ClipDistance[];
    };
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_Position — contains the position of the current vertex
适用范围:顶点着色器
}}
gl_PrimitiveID{{
类型:内建变量
声明:
 In tessellation control, tessellation evaluation, and
// fragment shaders
in int gl_PrimitiveID ; 
// In geometry shaders
out int gl_PrimitiveID ; 
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_PrimitiveID — contains the index of the current primitive
适用范围:1.50-3.30几何和片元着色器,4.00-4.50几何、片元和细分着色器
}}
gl_PrimitiveIDIn{{
类型:内建变量
声明:in int gl_PrimitiveIDIn ; 
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_PrimitiveIDIn — contains the index of the current primitive
适用范围:几何着色器
}}
gl_SampleID{{
类型:内建变量
声明:in int gl_SampleID ; 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_SampleID — contains the index of the sample currently being processed
适用范围:片元着色器
}}
gl_SampleMask{{
类型:内建变量
声明:out int gl_SampleMask[] ; 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_SampleMask — specifies the sample coverage mask for the current fragment
适用范围:片元着色器
}}
gl_SampleMaskIn{{
类型:内建变量
声明:in int gl_SampleMaskIn[] ; 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_SampleMaskIn — contains the computed sample coverage mask for the current fragment
适用范围:片元着色器
}}
gl_SamplePosition{{
类型:内建变量
声明:in vec2 gl_SamplePosition ; 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_SamplePosition — contains the location of the current sample within the current fragment
适用范围:片元着色器
}}
gl_TessCoord{{
类型:内建变量
声明:in vec3 gl_TessCoord ; 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_TessCoord — contains the coordinate of the vertex within the current patch
适用范围:细分着色器
}}
gl_TessLevelInner{{
类型:内建变量
声明:
// In tessellation control shaders
out float gl_TessLevelInner[2] ; 
// In tessellation evaluation shaders
in float gl_TessLevelInner[2] ; 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_TessLevelInner — contains the inner tessellation levels for the current patch
适用范围:细分着色器
}}
gl_TessLevelOuter{{
类型:内建变量
声明:
// In tessellation control shaders
out float gl_TessLevelOuter[4] ;
// In tessellation evaluation shaders
in float gl_TessLevelOuter[4] ; 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_TessLevelOuter — contains the outer tessellation levels for the current patch
适用范围:细分着色器
}}
gl_VertexID{{
类型:内建变量
声明:in int gl_VertexID ; 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_VertexID — contains the index of the current vertex
适用范围:顶点着色器
}}
gl_ViewportIndex{{
类型:内建变量
声明:
// In geometry shaders
out int gl_ViewportIndex ; 
// In fragment shaders
in int gl_ViewportIndex ; 
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:gl_ViewportIndex — contains the index of the viewport to be used in viewport transformation and scissoring
适用范围:1.50-4.20仅几何着色器,4.30-4.50仅片元和几何着色器
}}
gl_WorkGroupID{{
类型:内建变量
声明:in uvec3 gl_WorkGroupID ; 
支持版本:4.30 4.40 4.50 
描述:gl_WorkGroupID — contains the index of the workgroup currently being operated on by a compute shader
适用范围:计算着色器
}}
gl_WorkGroupSize{{
类型:内建变量
声明:const uvec3 gl_WorkGroupSize ; 
支持版本:4.30 4.40 4.50 
描述:gl_WorkGroupSize — contains the size of the workgroup operated on by a compute shader
适用范围:计算着色器
}}
cross{{
类型:向量操作函数
原型:
vec3 cross(vec3 x, vec3 y); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
dvec3 cross(dvec3 x,dvec3 y); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:cross — calculate the cross product of two vectors
适用范围:所有着色器
}}
distance{{
类型:向量操作函数
原型:
float distance(genType p0,genType p1);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
double distance(genDType p0,genDType p1); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:distance — calculate the distance between two points
适用范围:所有着色器
}}
dot{{
类型:向量操作函数
原型:
float dot(genType x,genType y);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
double dot(genDType x,genDType y);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:dot — calculate the dot product of two vectors
适用范围:所有着色器
}}
equal{{
类型:向量操作函数
原型:
bvec equal(vec x,vec y);  
bvec equal(ivec x,ivec y);  
bvec equal(uvec x,uvec y); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50
描述:equal — perform a component-wise equal-to comparison of two vectors
适用范围:所有着色器
}}
faceforward{{
类型:向量操作函数
原型:
genType faceforward(genType N,genType I,genType Nref);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
genDType faceforward(genDType N,genDType I,genDType Nref); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:faceforward — return a vector pointing in the same direction as another
适用范围:所有着色器
}}
length{{
类型:向量操作函数
原型:
float length(genType x);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
double length(genDType x);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50  
描述:length — calculate the length of a vector
适用范围:所有着色器
}}
normalize{{
类型:向量操作函数
原型:
genType normalize(genType v); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
genDType normalize(genDType v);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:normalize — returns a vector with the same direction as its parameter, but with length 1. 
适用范围:所有着色器
}}
notEqual{{
类型:向量操作函数
原型:
bvec notEqual(vec x,vec y); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
bvec notEqual(ivec x,ivec y);  
bvec notEqual(uvec x,uvec y); 
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:notEqual — perform a component-wise not-equal-to comparison of two vectors
适用范围:所有着色器
}}
reflect{{
类型:向量操作函数
原型:
genType reflect(genType I,genType N);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
genDType reflect(genDType I,genDType N); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:reflect — calculate the reflection direction for an incident vector
适用范围:所有着色器
}}
refract{{
类型:向量操作函数
原型:
genType refract(genType I,genType N,float eta);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
genDType refract(genDType I,genDType N,float eta); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:refract — calculate the refraction direction for an incident vector
适用范围:所有着色器
}}
all{{
类型:比较操作函数
原型:
bool all(bvec x); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:all — check whether all elements of a boolean vector are true
适用范围:所有着色器
}}
any{{
类型:比较操作函数
原型:
bool any(bvec x); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:any — check whether any element of a boolean vector is true
适用范围:所有着色器
}}
greaterThan{{
类型:比较操作函数
原型:
bvec greaterThan(vec x,vec y);  
bvec greaterThan(ivec x,ivec y); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
bvec greaterThan(uvec x,uvec y);  
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:greaterThan — perform a component-wise greater-than comparison of two vectors
适用范围:所有着色器
}}
greaterThanEqual{{
类型:比较操作函数
原型:
bvec greaterThanEqual(vec x,vec y);  
bvec greaterThanEqual(ivec x,ivec y);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
bvec greaterThanEqual(uvec x,uvec y);  
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
描述:greaterThanEqual — perform a component-wise greater-than-or-equal comparison of two vectors
适用范围:所有着色器
}}
lessThan{{
类型:比较操作函数
原型:
bvec lessThan(vec x,vec y);  
bvec lessThan(ivec x,ivec y); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
bvec lessThan(uvec x,uvec y); 
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:lessThan — perform a component-wise less-than comparison of two vectors
适用范围:所有着色器
}}
lessThanEqual{{
类型:比较操作函数
原型:
bvec lessThanEqual(vec x,vec y);  
bvec lessThanEqual(ivec x,ivec y);  
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
bvec lessThanEqual(uvec x,uvec y); 
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:lessThanEqual — perform a component-wise less-than-or-equal comparison of two vectors
适用范围:所有着色器
}}
not{{
类型:比较操作函数
原型:
bvec not(bvec x); 
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:not — logically invert a boolean vector
适用范围:所有着色器
}}
EmitStreamVertex{{
类型:几何着色器函数
原型:
void EmitStreamVertex(int stream); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:EmitStreamVertex — emit a vertex to a specified stream
适用范围:几何着色器
}}
EmitVertex{{
类型:几何着色器函数
原型:
void EmitVertex(void);  
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:EmitVertex — emit a vertex to the first vertex stream
适用范围:几何着色器
}}
EndPrimitive{{
类型:几何着色器函数
原型:
void EndPrimitive(void);  
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:EndPrimitive — complete the current output primitive on the first vertex stream
适用范围:几何着色器
}}
EndStreamPrimitive{{
类型:几何着色器函数
原型:
void EndStreamPrimitive(int stream); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:EndStreamPrimitive — complete the current output primitive on a specified stream
适用范围:几何着色器
}}
interpolateAtCentroid{{
类型:纹理采样函数
原型:
float interpolateAtCentroid(float interpolant);  
vec2 interpolateAtCentroid(vec2 interpolant);  
vec3 interpolateAtCentroid(vec3 interpolant);  
vec4 interpolateAtCentroid(vec4 interpolant);  
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:interpolateAtCentroid — sample a varying at the centroid of a pixel
适用范围:片元着色器等
}}
interpolateAtOffset{{
类型:纹理采样函数
原型:
float interpolateAtOffset(float interpolant,vec2 offset);  
vec2 interpolateAtOffset(vec2 interpolant,vec2 offset);  
vec3 interpolateAtOffset(vec3 interpolant,vec2 offset);  
vec4 interpolateAtOffset(vec4 interpolant,vec2 offset); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:interpolateAtOffset — sample a varying at specified offset from the center of a pixel
适用范围:片元着色器等
}}
interpolateAtSample{{
类型:纹理采样函数
原型:
float interpolateAtSample(float interpolant,int sample);  
vec2 interpolateAtSample(vec2 interpolant,int sample);  
vec3 interpolateAtSample(vec3 interpolant,int sample);  
vec4 interpolateAtSample(vec4 interpolant,int sample); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:interpolateAtSample — sample a varying at the location of a specified sample
适用范围:片元着色器等
}}
texelFetch{{
类型:纹理采样函数
原型:
gvec4 texelFetch(gsampler1D sampler,int P,int lod);
gvec4 texelFetch(gsampler2D sampler,ivec2 P,int lod);
gvec4 texelFetch(gsampler3D sampler,ivec3 P,int lod);
gvec4 texelFetch(gsampler1DArray sampler,ivec2 P,int lod);
gvec4 texelFetch(gsampler2DArray sampler,ivec3 P,int lod);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
gvec4 texelFetch(gsampler2DRect sampler,ivec2 P);
gvec4 texelFetch(gsamplerBuffer sampler,int P);
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
gvec4 texelFetch(gsampler2DMS sampler,ivec2 P,sample sample);
gvec4 texelFetch(gsampler2DMSArray sampler,ivec3 P,sample sample);
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:texelFetch — perform a lookup of a single texel within a texture
适用范围:片元着色器等
}}
texelFetchOffset{{
类型:纹理采样函数
原型:
gvec4 texelFetchOffset(gsampler1D sampler,int P,int lod,int offset);  
gvec4 texelFetchOffset(gsampler2D sampler,ivec2 P,int lod,int offset);  
gvec4 texelFetchOffset(gsampler3D sampler,ivec3 P,int lod,int offset);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
gvec4 texelFetchOffset(gsampler2DRect sampler,ivec2 P,int offset);
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
gvec4 texelFetchOffset(gsampler1DArray sampler,ivec2 P,int lod,int offset);  
gvec4 texelFetchOffset(gsampler2DArray sampler,ivec3 P,int lod, int offset); 
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:texelFetchOffset — perform a lookup of a single texel within a texture with an offset
适用范围:片元着色器等
}}
texture{{
类型:纹理采样函数
原型:
gvec4 texture(gsampler1D sampler,float P,[float bias]);  
gvec4 texture(gsampler2D sampler,vec2 P,[float bias]);  
gvec4 texture(gsampler3D sampler,vec3 P,[float bias]);  
gvec4 texture(gsamplerCube sampler,vec3 P,[float bias]);  
gvec4 texture(gsampler1DArray sampler,vec2 P,[float bias]);  
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
float texture(samplerCubeShadow sampler,vec3 P,[float bias]);  
gvec4 texture(gsamplerCubeArray sampler,vec4 P,[float bias]);
float texture(gsamplerCubeArrayShadow sampler,    vec4 P,    float compare); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
float texture(sampler1DShadow sampler,vec3 P,[float bias]);  
float texture(sampler2DShadow sampler,vec3 P,[float bias]);  
gvec4 texture(gsampler2DArray sampler,vec3 P,[float bias]);    
float texture(sampler1DArrayShadow sampler,vec3 P,[float bias]);  
float texture(gsampler2DArrayShadow sampler,vec4 P,[float bias]);  
gvec4 texture(gsampler2DRect sampler,vec2 P);  
float texture(sampler2DRectShadow sampler,vec3 P);
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
描述:texture — retrieves texels from a texture
适用范围:片元着色器等
}}
textureGather{{
类型:纹理采样函数
原型:
gvec4 textureGather(gsampler2D sampler,vec2 P,[int comp]);  
gvec4 textureGather(gsampler2DArray sampler,vec3 P,[int comp]);  
gvec4 textureGather(gsamplerCube sampler,vec3 P,[int comp]);  
gvec4 textureGather(gsamplerCubeArray sampler,vec4 P,[int comp]);  
gvec4 textureGather(gsampler2DRect sampler,vec3 P,[int comp]);  
vec4 textureGather(gsampler2DShadow sampler,vec2 P,float refZ);  
vec4 textureGather(gsampler2DArrayShadow sampler,vec3 P,float refZ); 
vec4 textureGather(gsamplerCubeShadow sampler,vec3 P,float refZ);  
vec4 textureGather(gsamplerCubeArrayShadow sampler,vec4 P,float refZ);  
vec4 textureGather(gsampler2DRectShadow sampler,vec3 P,float refZ); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureGather — gathers four texels from a texture
适用范围:片元着色器等
}}
textureGatherOffset{{
类型:纹理采样函数
原型:
gvec4 textureGatherOffset(gsampler2D sampler,vec2 P,ivec2 offset,[int comp]);  
gvec4 textureGatherOffset(gsampler2DArray sampler,vec3 P,ivec2 offset,[int comp]);  
gvec4 textureGatherOffset(gsampler2DRect sampler,vec3 P,ivec2 offset,[int comp]);  
vec4 textureGatherOffset(gsampler2DShadow sampler,vec2 P,float refZ,ivec2 offset);  
vec4 textureGatherOffset(gsampler2DArrayShadow sampler,vec3 P,float refZ,ivec2 offset);  
vec4 textureGatherOffset(gsampler2DRectShadow sampler,vec3 P,float refZ,ivec2 offset); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureGatherOffset — gathers four texels from a texture with offset
适用范围:片元着色器等
}}
textureGatherOffsets{{
类型:纹理采样函数
原型:
gvec4 textureGatherOffsets(gsampler2D sampler,vec2 P,ivec2 offsets[4],[int comp]);  
gvec4 textureGatherOffsets(gsampler2DArray sampler,vec3 P,ivec2 offsets[4],[int comp]);  
gvec4 textureGatherOffsets(gsampler2DRect sampler,vec3 P,ivec2 offsets[4],[int comp]);  
vec4 textureGatherOffsets(gsampler2DShadow sampler,vec2 P,float refZ,ivec2 offsets[4]);  
vec4 textureGatherOffsets(gsampler2DArrayShadow sampler,vec3 P,float refZ,ivec2 offsets[4]);  
vec4 textureGatherOffsets(gsampler2DRectShadow sampler,vec3 P,float refZ,ivec2 offsets[4]); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureGatherOffsets — gathers four texels from a texture with an array of offsets
适用范围:片元着色器等
}}
textureGrad{{
类型:纹理采样函数
原型:
gvec4 textureGrad(gsampler1D sampler,float P,float dPdx,float dPdy);  
gvec4 textureGrad(gsampler2D sampler,vec2 P,vec2 dPdx,vec2 dPdy);  
gvec4 textureGrad(gsampler3D sampler,vec3 P,vec3 dPdx,vec3 dPdy);  
gvec4 textureGrad(gsamplerCube sampler,vec3 P,vec3 dPdx,vec3 dPdy);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
gvec4 textureGrad(gsampler2DRect sampler,vec2 P,vec2 dPdx,vec2 dPdy);  
float textureGrad(gsampler2DRectShadow sampler,vec2 P,vec2 dPdx,vec2 dPdy);  
float textureGrad(sampler1DShadow sampler,vec3 P,float dPdx,float dPdy);  
float textureGrad(sampler2DShadow sampler,vec3 P,vec2 dPdx,vec2 dPdy);  
gvec4 textureGrad(gsampler1DArray sampler,vec2 P,float dPdx,float dPdy);  
gvec4 textureGrad(gsampler2DArray sampler,vec3 P,vec2 dPdx,vec2 dPdy);  
float textureGrad(sampler1DArrayShadow sampler,vec3 P,float dPdx,float dPdy);
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
gvec4 textureGrad(gsamplerCubeArray sampler,    vec4 P,    vec3 dPdx,    vec3 dPdy); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureGrad — perform a texture lookup with explicit gradients
适用范围:片元着色器等
}}
textureGradOffset{{
类型:纹理采样函数
原型:
gvec4 textureGradOffset(gsampler1D sampler,float P,float dPdx,float dPdy,int offset);  
gvec4 textureGradOffset(gsampler2D sampler,vec2 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
gvec4 textureGradOffset(gsampler3D sampler,vec3 P,vec3 dPdx,vec3 dPdy,ivec3 offset); 
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
gvec4 textureGradOffset(gsampler2DRect sampler,vec2 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
float textureGradOffset(gsampler2DRectShadow sampler,vec3 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
float textureGradOffset(sampler1DShadow sampler,vec3 P,float dPdx,float dPdy,int offset);  
float textureGradOffset(sampler2DShadow sampler,vec3 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
gvec4 textureGradOffset(gsampler1DArray sampler,vec2 P,float dPdx,float dPdy,int offset);  
gvec4 textureGradOffset(gsampler2DArray sampler,vec3 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
float textureGradOffset(sampler1DArrayShadow sampler,vec3 P,float dPdx,float dPdy,int offset);  
float textureGradOffset(sampler2DArrayShadow sampler,vec3 P,vec2 dPdx,vec2 dPdy,ivec2 offset); 
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureGradOffset — perform a texture lookup with explicit gradients and offset
适用范围:片元着色器等
}}
textureLod{{
类型:纹理采样函数
原型:
gvec4 textureLod(gsampler1D sampler,float P,float lod);  
gvec4 textureLod(gsampler2D sampler,vec2 P,float lod);  
gvec4 textureLod(gsampler3D sampler,vec3 P,float lod);  
gvec4 textureLod(gsamplerCube sampler,vec3 P,float lod);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
float textureLod(sampler1DShadow sampler,vec3 P,float lod);  
float textureLod(sampler2DShadow sampler,vec4 P,float lod);  
gvec4 textureLod(gsampler1DArray sampler,vec2 P,float lod);  
gvec4 textureLod(gsampler2DArray sampler,vec3 P,float lod);  
float textureLod(sampler1DArrayShadow sampler,vec3 P,float lod); 
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
gvec4 textureLod(gsamplerCubeArray sampler,vec4 P,float lod); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureLod — perform a texture lookup with explicit level-of-detail
适用范围:片元着色器等
}}
textureLodOffset{{
类型:纹理采样函数
原型:
gvec4 textureLodOffset(gsampler1D sampler,float P,float lod,int offset);  
gvec4 textureLodOffset(gsampler2D sampler,vec2 P,float lod,ivec2 offset);  
gvec4 textureLodOffset(gsampler3D sampler,vec3 P,float lod,ivec3 offset);  
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
float textureLodOffset(sampler1DShadow sampler,vec3 P,float lod,int offset);  
float textureLodOffset(sampler2DShadow sampler,vec4 P,float lod,ivec2 offset);
gvec4 textureLodOffset(gsampler1DArray sampler,vec2 P,float lod,int offset);  
gvec4 textureLodOffset(gsampler2DArray sampler,vec3 P,float lod,ivec2 offset);  
float textureLodOffset(sampler1DArrayShadow sampler,vec3 P,float lod,int offset);   
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureLodOffset — perform a texture lookup with explicit level-of-detail and offset
适用范围:片元着色器等
}}
textureOffset{{
类型:纹理采样函数
原型:
gvec4 textureOffset(gsampler1D sampler,float P,int offset,[float bias]);  
gvec4 textureOffset(gsampler2D sampler,vec2 P,ivec2 offset,[float bias]);  
gvec4 textureOffset(gsampler3D sampler,vec3 P,ivec3 offset,[float bias]);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
gvec4 textureOffset(gsampler2DRect sampler,vec2 P,ivec2 offset);  
float textureOffset(sampler2DRectShadow sampler,vec3 P,ivec2 offset);  
float textureOffset(sampler1DShadow sampler,vec3 P,int offset,[float bias]);  
float textureOffset(sampler2DShadow sampler,vec4 P,ivec2 offset,[float bias]);  
gvec4 textureOffset(gsampler1DArray sampler,vec2 P,int offset,[float bias]);  
gvec4 textureOffset(gsampler2DArray sampler,vec3 P,ivec2 offset,[float bias]);  
float textureOffset(sampler1DArrayShadow sampler,vec3 P,int offset);  
float textureOffset(sampler2DArrayShadow sampler,vec4 P,vec2 offset);   
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureOffset — perform a texture lookup with offset
适用范围:片元着色器等
}}
textureProj{{
类型:纹理采样函数
原型:
gvec4 textureProj(gsampler1D sampler,vec2 P,[float bias]);  
gvec4 textureProj(gsampler1D sampler,vec4 P,[float bias]);  
gvec4 textureProj(gsampler2D sampler,vec3 P,[float bias]);  
gvec4 textureProj(gsampler2D sampler,vec4 P,[float bias]);  
gvec4 textureProj(gsampler3D sampler,vec4 P,[float bias]);  
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
float textureProj(sampler1DShadow sampler,vec4 P,[float bias]);  
float textureProj(sampler2DShadow sampler,vec4 P,[float bias]);  
gvec4 textureProj(gsampler2DRect sampler,vec3 P);  
gvec4 textureProj(gsampler2DRect sampler,vec4 P);  
float textureProj(gsampler2DRectShadow sampler,vec4 P);  
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureProj — perform a texture lookup with projection
适用范围:片元着色器等
}}
textureProjGrad{{
类型:纹理采样函数
原型:
gvec4 textureProjGrad(gsampler1D sampler,vec2 P,float pDx,float pDy);  
gvec4 textureProjGrad(gsampler1D sampler,vec4 P,float pDx,float pDy);  
gvec4 textureProjGrad(gsampler2D sampler,vec3 P,vec2 pDx,vec2 pDy);  
gvec4 textureProjGrad(gsampler2D sampler,vec4 P,vec2 pDx,vec2 pDy);  
gvec4 textureProjGrad(gsampler3D sampler,vec4 P,vec3 pDx,vec3 pDy);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
float textureProjGrad(sampler1DShadow sampler,vec4 P,float pDx,float pDy);  
float textureProjGrad(sampler2DShadow sampler,vec4 P,vec2 pDx,vec2 pDy);  
gvec4 textureProjGrad(gsampler2DRect sampler,vec3 P,vec2 pDx,vec2 pDy);  
gvec4 textureProjGrad(gsampler2DRect sampler,vec4 P,vec2 pDx,vec2 pDy);  
float textureProjGrad(gsampler2DRectShadow sampler,vec4 P,vec2 pDx,vec2 pDy); 
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureProjGrad — perform a texture lookup with projection and explicit gradients
适用范围:片元着色器等
}}
textureProjGradOffset{{
类型:纹理采样函数
原型:
gvec4 textureProjGradOffset(gsampler1D sampler,vec2 P,float dPdx,float dPdy,int offset);  
gvec4 textureProjGradOffset(gsampler1D sampler,vec4 P,float dPdx,float dPdy,int offset);  
gvec4 textureProjGradOffset(gsampler2D sampler,vec3 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
gvec4 textureProjGradOffset(gsampler2D sampler,vec4 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
gvec4 textureProjGradOffset(gsampler3D sampler,vec4 P,vec3 dPdx,vec3 dPdy,ivec3 offset);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
float textureProjGradOffset(sampler1DShadow sampler,vec4 P,float dPdx,float dPdy,int offset);  
float textureProjGradOffset(sampler2DShadow sampler,vec4 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
gvec4 textureProjGradOffset(gsampler2DRect sampler,vec3 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
gvec4 textureProjGradOffset(gsampler2DRect sampler,vec4 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
float textureProjGradOffset(gsampler2DRectShadow sampler,vec4 P,vec2 dPdx,vec2 dPdy,ivec2 offset);  
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureProjGradOffset — perform a texture lookup with projection, explicit gradients and offset
适用范围:片元着色器等
}}
textureProjLod{{
类型:纹理采样函数
原型:
gvec4 textureProjLod(gsampler1D sampler,vec2 P,float lod);  
gvec4 textureProjLod(gsampler1D sampler,vec4 P,float lod);  
gvec4 textureProjLod(gsampler2D sampler,vec3 P,float lod);  
gvec4 textureProjLod(gsampler2D sampler,vec4 P,float lod);  
gvec4 textureProjLod(gsampler3D sampler,vec4 P,float lod);  
float textureProjLod(sampler1DShadow sampler,vec4 P,float lod);  
float textureProjLod(sampler2DShadow sampler,vec4 P,float lod);   
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureProjLod — perform a texture lookup with projection and explicit level-of-detail
适用范围:片元着色器等
}}
textureProjLodOffset{{
类型:纹理采样函数
原型:
gvec4 textureProjLodOffset(gsampler1D sampler,vec2 P,float lod,int offset);  
gvec4 textureProjLodOffset(gsampler1D sampler,vec4 P,float lod,int offset);  
gvec4 textureProjLodOffset(gsampler2D sampler,vec3 P,float lod,ivec2 offset);  
gvec4 textureProjLodOffset(gsampler2D sampler,vec4 P,float lod,ivec2 offset);  
gvec4 textureProjLodOffset(gsampler3D sampler,vec4 P,float lod,ivec3 offset);  
float textureProjLodOffset(sampler1DShadow sampler,vec4 P,float lod,int offset);  
float textureProjLodOffset(sampler2DShadow sampler,vec4 P,float lod,ivec2 offset);  
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
描述:textureProjLodOffset — perform a texture lookup with projection and explicit level-of-detail and offset
适用范围:片元着色器等
}}
textureProjOffset{{
类型:纹理采样函数
原型:
gvec4 textureProjOffset(gsampler1D sampler,vec2 P,int offset,[float bias]);  
gvec4 textureProjOffset(gsampler1D sampler,vec4 P,int offset,[float bias]);  
gvec4 textureProjOffset(gsampler2D sampler,vec3 P,ivec2 offset,[float bias]); 
gvec4 textureProjOffset(gsampler2D sampler,vec4 P,ivec2 offset,[float bias]);  
gvec4 textureProjOffset(gsampler3D sampler,vec4 P,ivec3 offset,[float bias]);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
float textureProjOffset(sampler1DShadow sampler,vec4 P,int offset,[float bias]);  
float textureProjOffset(sampler2DShadow sampler,vec4 P,ivec2 offset,[float bias]);  
gvec4 textureProjOffset(gsampler2DRect sampler,vec3 P,ivec2 offset);  
gvec4 textureProjOffset(gsampler2DRect sampler,vec4 P,ivec2 offset);  
float textureProjOffset(gsampler2DRectShadow sampler,vec4 P,ivec2 offset);   
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureProjOffset — perform a texture lookup with projection and offset
适用范围:片元着色器等
}}
textureQueryLevels{{
类型:纹理采样函数
原型:
int textureQueryLevels(gsampler1D sampler);  
int textureQueryLevels(gsampler2D sampler);  
int textureQueryLevels(gsampler3D sampler);  
int textureQueryLevels(gsamplerCube sampler);  
int textureQueryLevels(gsampler1DArray sampler);  
int textureQueryLevels(gsampler2DDArray sampler);  
int textureQueryLevels(gsamplerCubeArray sampler);  
int textureQueryLevels(gsampler1DShadow sampler);  
int textureQueryLevels(gsampler2DShadow sampler);  
int textureQueryLevels(gsamplerCubeShadow sampler);  
int textureQueryLevels(gsampler1DArrayShadow sampler);  
int textureQueryLevels(gsampler2DArrayShadow sampler);  
int textureQueryLevels(gsamplerCubeArrayShadow sampler);   
支持版本:4.30 4.40 4.50 
描述:textureQueryLevels — compute the number of accessible mipmap levels of a texture
适用范围:片元着色器等
}}
textureQueryLod{{
类型:纹理采样函数
原型:
vec2 textureQueryLod(gsampler1D sampler,float P);  
vec2 textureQueryLod(gsampler2D sampler,vec2 P);  
vec2 textureQueryLod(gsampler3D sampler,vec3 P);  
vec2 textureQueryLod(gsamplerCube sampler,vec3 P);  
vec2 textureQueryLod(gsampler1DArray sampler,float P);  
vec2 textureQueryLod(gsampler2DDArray sampler,vec2 P);  
vec2 textureQueryLod(gsamplerCubeArray sampler,vec3 P);  
vec2 textureQueryLod(gsampler1DShadow sampler,float P);  
vec2 textureQueryLod(gsampler2DShadow sampler,vec2 P);  
vec2 textureQueryLod(gsamplerCubeShadow sampler,vec3 P);  
vec2 textureQueryLod(gsampler1DArrayShadow sampler,float P);  
vec2 textureQueryLod(gsampler2DArrayShadow sampler,vec2 P);  
vec2 textureQueryLod(gsamplerCubeArrayShadow sampler,vec3 P); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureQueryLod — compute the level-of-detail that would be used to sample from a texture
适用范围:片元着色器等
}}
textureSamples{{
类型:纹理采样函数
原型:
int textureSamples(gsampler2DMS sampler);
int textureSamples(gsampler2DMSArray sampler); 
支持版本:4.50 
描述:textureSamples — return the number of samples of a texture
适用范围:片元着色器等
}}
textureSize{{
类型:纹理采样函数
原型:
int textureSize(gsampler1D sampler,int lod);  
ivec2 textureSize(gsampler2D sampler,int lod);  
ivec3 textureSize(gsampler3D sampler,int lod);  
ivec2 textureSize(gsamplerCube sampler,int lod);
支持版本:1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
int textureSize(sampler1DShadow sampler,int lod);  
ivec2 textureSize(sampler2DShadow sampler,int lod);  
ivec2 textureSize(gsamplerRect sampler);  
ivec2 textureSize(gsamplerRectShadow sampler);  
ivec2 textureSize(gsampler1DArray sampler,int lod);  
ivec3 textureSize(gsampler2DArray sampler,int lod);  
ivec2 textureSize(sampler1DArrayShadow sampler,int lod);  
ivec3 textureSize(sampler2DArrayShadow sampler,int lod);  
int textureSize(gsamplerBuffer sampler);  
ivec2 textureSize(gsampler2DMS sampler);  
ivec3 textureSize(gsampler2DMSArray sampler); 
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
ivec2 textureSize(samplerCubeShadow sampler,int lod);  
ivec3 textureSize(samplerCubeArray sampler,int lod);  
ivec3 textureSize(samplerCubeArrayShadow sampler,int lod);
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:textureSize — retrieve the dimensions of a level of a texture
适用范围:片元着色器等
}}
determinant{{
类型:矩阵操作函数
原型:
float determinant(mat2 m);  
float determinant(mat3 m);  
float determinant(mat4 m);  
支持版本:1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50 
double determinant(dmat2 m);  
double determinant(dmat3 m);  
double determinant(dmat4 m); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:determinant — calculate the determinant of a matrix
适用范围:所有着色器
}}
groupMemoryBarrier{{
类型:矩阵操作函数
原型:void groupMemoryBarrier(void); 
支持版本:4.30 4.40 4.50 
描述:groupMemoryBarrier — controls the ordering of memory transaction issued shader invocation relative to a work group
适用范围:计算着色器
}}
inverse{{
类型:矩阵操作函数
原型:
mat2 inverse(mat2 m);  
mat3 inverse(mat3 m);  
mat4 inverse(mat4 m);
支持版本:1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
dmat2 inverse(dmat2 m);  
dmat3 inverse(dmat3 m);  
dmat4 inverse(dmat4 m); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:inverse — calculate the inverse of a matrix
适用范围:所有着色器
}}
matrixCompMult{{
类型:矩阵操作函数
原型:
mat matrixCompMult(mat x,mat y);
支持版本:1.10 1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50  
dmat matrixCompMult(dmat x,dmat y); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:matrixCompMult — perform a component-wise multiplication of two matrices
适用范围:所有着色器
}}
outerProduct{{
类型:矩阵操作函数
原型:
mat2 outerProduct(vec2 c,vec2 r);  
mat3 outerProduct(vec3 c,vec3 r);  
mat4 outerProduct(vec4 c,vec4 r);  
mat2x3 outerProduct(vec3 c,vec2 r);  
mat3x2 outerProduct(vec2 c,vec3 r);  
mat2x4 outerProduct(vec4 c,vec2 r);  
mat4x2 outerProduct(vec2 c,vec4 r);  
mat3x4 outerProduct(vec4 c,vec3 r);  
mat4x3 outerProduct(vec3 c,vec4 r);
支持版本:1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
dmat2 outerProduct(dvec2 c,dvec2 r);  
dmat3 outerProduct(dvec3 c,dvec3 r);  
dmat4 outerProduct(dvec4 c,dvec4 r);  
dmat2x3 outerProduct(dvec3 c,dvec2 r);  
dmat3x2 outerProduct(dvec2 c,dvec3 r);  
dmat2x4 outerProduct(dvec4 c,dvec2 r);  
dmat4x2 outerProduct(dvec2 c,dvec4 r);  
dmat3x4 outerProduct(dvec4 c,dvec3 r);  
dmat4x3 outerProduct(dvec3 c,dvec4 r); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:outerProduct — calculate the outer product of a pair of vectors
适用范围:所有着色器
}}
transpose{{
类型:矩阵操作函数
原型:
mat2 transpose(mat2 m);  
mat3 transpose(mat3 m);  
mat4 transpose(mat4 m);  
mat2x3 transpose(mat3x2 m);  
mat2x4 transpose(mat4x2 m);  
mat3x2 transpose(mat2x3 m);  
mat3x4 transpose(mat4x3 m);  
mat4x2 transpose(mat2x4 m);  
mat4x3 transpose(mat3x4 m);
支持版本:1.20 1.30 1.40 1.50 3.30 4.00 4.10 4.20 4.30 4.40 4.50   
dmat2 transpose(dmat2 m);  
dmat3 transpose(dmat3 m);  
dmat4 transpose(dmat4 m);  
dmat2x3 transpose(dmat3x2 m);  
dmat2x4 transpose(dmat4x2 m);  
dmat3x2 transpose(dmat2x3 m);  
dmat3x4 transpose(dmat4x3 m);  
dmat4x2 transpose(dmat2x4 m);  
dmat4x3 transpose(dmat3x4 m); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:transpose — calculate the transpose of a matrix
适用范围:所有着色器
}}
bitCount{{
类型:整数操作函数
原型:
genIType bitCount(genIType value);  
genIType bitCount(genUType value); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:bitCount — counts the number of 1 bits in an integer
适用范围:所有着色器
}}
bitfieldExtract{{
类型:整数操作函数
原型:
genIType bitfieldExtract(genIType value,int offset,int bits);  
genUType bitfieldExtract(genUType value,int offset,int bits); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:bitfieldExtract — extract a range of bits from an integer
适用范围:所有着色器
}}
bitfieldInsert{{
类型:整数操作函数
原型:
genIType bitfieldInsert(genIType base,genIType insert,int offset,int bits);  
genUType bitfieldInsert(genUType base,genUType insert,int offset,int bits); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:bitfieldInsert — insert a range of bits into an integer
适用范围:所有着色器
}}
bitfieldReverse{{
类型:整数操作函数
原型:
genIType bitfieldReverse(genIType value);  
genUType bitfieldReverse(genUType value); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:bitfieldReverse — reverse the order of bits in an integer
适用范围:所有着色器
}}
findLSB{{
类型:整数操作函数
原型:
genIType findLSB(genIType value);
genIType findLSB(genUType value);
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:findLSB — find the index of the least significant bit set to 1 in an integer
适用范围:所有着色器
}}
findMSB{{
类型:整数操作函数
原型:
genIType findMSB(genIType value);  
genIType findMSB(genUType value); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:findMSB — find the index of the most significant bit set to 1 in an integer
适用范围:所有着色器
}}
uaddCarry{{
类型:整数操作函数
原型:
genUType uaddCarry(genUType x,genUType y,out genUType carry); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:uaddCarry — add unsigned integers and generate carry
适用范围:所有着色器
}}
umulExtended{{
类型:整数操作函数
原型:
void umulExtended(genUType x,genUType y,out genUType msb,out genUType lsb);  
void imulExtended(genIType x,genIType y,out genIType msb,out genIType lsb); 
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:umulExtended — perform a 32- by 32-bit multiply to produce a 64-bit result
适用范围:所有着色器
}}
usubBorrow{{
类型:整数操作函数
原型:
genUType usubBorrow(genUType x,genUType y,out genUType borrow);   
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:usubBorrow — subtract unsigned integers and generate borrow
适用范围:所有着色器
}}
imageAtomicAdd{{
类型:图像操作函数
原型:
uint imageAtomicAdd(gimage1D image,int P,uint data);  
uint imageAtomicAdd(gimage2D image,ivec2 P,uint data);  
uint imageAtomicAdd(gimage3D image,ivec3 P,uint data);  
uint imageAtomicAdd(gimage2DRect image,ivec2 P,uint data);  
uint imageAtomicAdd(gimageCube image,ivec3 P,uint data);  
uint imageAtomicAdd(gbufferImage image,int P,uint data);  
uint imageAtomicAdd(gimage1DArray image,ivec2 P,uint data);  
uint imageAtomicAdd(gimage2DArray image,ivec3 P,uint data);  
uint imageAtomicAdd(gimageCubeArray image,ivec3 P,uint data);  
uint imageAtomicAdd(gimage2DMS image,ivec2 P,int sample,uint data);  
uint imageAtomicAdd(gimage2DMSArray image,ivec3 P,int sample,uint data);  
int imageAtomicAdd(gimage1D image,int P,int data);  
int imageAtomicAdd(gimage2D image,ivec2 P,int data);  
int imageAtomicAdd(gimage3D image,ivec3 P,int data);  
int imageAtomicAdd(gimage2DRect image,ivec2 P,int data);  
int imageAtomicAdd(gimageCube image,ivec3 P,int data);  
int imageAtomicAdd(gbufferImage image,int P,int data);  
int imageAtomicAdd(gimage1DArray image,ivec2 P,int data);  
int imageAtomicAdd(gimage2DArray image,ivec3 P,int data);  
int imageAtomicAdd(gimageCubeArray image,ivec3 P,int data);  
int imageAtomicAdd(gimage2DMS image,ivec2 P,int sample,int data);  
int imageAtomicAdd(gimage2DMSArray image,ivec3 P,int sample,int data);  
支持版本:4.20 4.30 4.40 4.50  
描述:imageAtomicAdd — atomically add a value to an existing value in memory and return the original value
适用范围:计算着色器等
}}
imageAtomicCompSwap{{
类型:图像操作函数
原型:
uint imageAtomicCompSwap(gimage1D image,int P,uint compare,uint data);  
uint imageAtomicCompSwap(gimage2D image,ivec2 P,uint compare,uint data);  
uint imageAtomicCompSwap(gimage3D image,ivec3 P,uint compare,uint data);  
uint imageAtomicCompSwap(gimage2DRect image,ivec2 P,uint compare,uint data);  
uint imageAtomicCompSwap(gimageCube image,ivec3 P,uint compare,uint data);  
uint imageAtomicCompSwap(gbufferImage image,int P,uint compare,uint data);  
uint imageAtomicCompSwap(gimage1DArray image,ivec2 P,uint compare,uint data);  
uint imageAtomicCompSwap(gimage2DArray image,ivec3 P,uint compare,uint data);  
uint imageAtomicCompSwap(gimageCubeArray image,ivec3 P,uint compare,uint data);  
uint imageAtomicCompSwap(gimage2DMS image,ivec2 P,int sample,uint compare,uint data);  
uint imageAtomicCompSwap(gimage2DMSArray image,ivec3 P,int sample,uint compare,uint data);  
int imageAtomicCompSwap(gimage1D image,int P,int compare,int data);  
int imageAtomicCompSwap(gimage2D image,ivec2 P,int compare,int data);  
int imageAtomicCompSwap(gimage3D image,ivec3 P,int compare,int data);  
int imageAtomicCompSwap(gimage2DRect image,ivec2 P,int compare,int data);  
int imageAtomicCompSwap(gimageCube image,ivec3 P,int compare,int data);  
int imageAtomicCompSwap(gbufferImage image,int P,int compare,int data);  
int imageAtomicCompSwap(gimage1DArray image,ivec2 P,int compare,int data);  
int imageAtomicCompSwap(gimage2DArray image,ivec3 P,int compare,int data);  
int imageAtomicCompSwap(gimageCubeArray image,ivec3 P,int compare,int data);  
int imageAtomicCompSwap(gimage2DMS image,ivec2 P,int sample,int compare,int data);  
int imageAtomicCompSwap(gimage2DMSArray image,ivec3 P,int sample,int compare,int data);  
支持版本:4.20 4.30 4.40 4.50 
描述:imageAtomicCompSwap — atomically compares supplied data with that in memory and conditionally stores it to memory
适用范围:计算着色器等
}}
imageAtomicExchange{{
类型:图像操作函数
原型:
uint imageAtomicExchange(gimage1D image,int P,uint data);  
uint imageAtomicExchange(gimage2D image,ivec2 P,uint data);  
uint imageAtomicExchange(gimage3D image,ivec3 P,uint data);  
uint imageAtomicExchange(gimage2DRect image,ivec2 P,uint data);  
uint imageAtomicExchange(gimageCube image,ivec3 P,uint data);  
uint imageAtomicExchange(gbufferImage image,int P,uint data);  
uint imageAtomicExchange(gimage1DArray image,ivec2 P,uint data);  
uint imageAtomicExchange(gimage2DArray image,ivec3 P,uint data);  
uint imageAtomicExchange(gimageCubeArray image,ivec3 P,uint data);  
uint imageAtomicExchange(gimage2DMS image,ivec2 P,int sample,uint data);  
uint imageAtomicExchange(gimage2DMSArray image,ivec3 P,int sample,uint data);  
int imageAtomicExchange(gimage1D image,int P,int data);  
int imageAtomicExchange(gimage2D image,ivec2 P,int data);  
int imageAtomicExchange(gimage3D image,ivec3 P,int data);  
int imageAtomicExchange(gimage2DRect image,ivec2 P,int data);  
int imageAtomicExchange(gimageCube image,ivec3 P,int data);  
int imageAtomicExchange(gbufferImage image,int P,int data);  
int imageAtomicExchange(gimage1DArray image,ivec2 P,int data);  
int imageAtomicExchange(gimage2DArray image,ivec3 P,int data); 
int imageAtomicExchange(gimageCubeArray image,ivec3 P,int data);  
int imageAtomicExchange(gimage2DMS image,ivec2 P,int sample,int data);  
int imageAtomicExchange(gimage2DMSArray image,ivec3 P,int sample,int data);  
int imageAtomicExchange(gimage1D image,int P,float data);  
int imageAtomicExchange(gimage2D image,ivec2 P,float data);  
int imageAtomicExchange(gimage3D image,ivec3 P,float data);  
int imageAtomicExchange(gimage2DRect image,ivec2 P,float data);  
int imageAtomicExchange(gimageCube image,ivec3 P,float data);  
int imageAtomicExchange(gbufferImage image,int P,float data);  
int imageAtomicExchange(gimage1DArray image,ivec2 P,float data);  
int imageAtomicExchange(gimage2DArray image,ivec3 P,float data);  
int imageAtomicExchange(gimageCubeArray image,ivec3 P,float data);  
int imageAtomicExchange(gimage2DMS image,ivec2 P,int sample,float data);  
int imageAtomicExchange(gimage2DMSArray image,ivec3 P,int sample,float data); 
支持版本:4.20 4.30 4.40 4.50 
描述:imageAtomicExchange — atomically store supplied data into memory and return the original value from memory
适用范围:计算着色器等
}}
imageAtomicMax{{
类型:图像操作函数
原型:
uint imageAtomicMax(gimage1D image,int P,uint data); 
uint imageAtomicMax(gimage2D image,ivec2 P,uint data); 
uint imageAtomicMax(gimage3D image,ivec3 P,uint data); 
uint imageAtomicMax(gimage2DRect image,ivec2 P,uint data); 
uint imageAtomicMax(gimageCube image,ivec3 P,uint data); 
uint imageAtomicMax(gbufferImage image,int P,uint data); 
uint imageAtomicMax(gimage1DArray image,ivec2 P,uint data); 
uint imageAtomicMax(gimage2DArray image,ivec3 P,uint data); 
uint imageAtomicMax(gimageCubeArray image,ivec3 P,uint data); 
uint imageAtomicMax(gimage2DMS image,ivec2 P,int sample,uint data); 
uint imageAtomicMax(gimage2DMSArray image,ivec3 P,int sample,uint data); 
int imageAtomicMax(gimage1D image,int P,int data); 
int imageAtomicMax(gimage2D image,ivec2 P,int data); 
int imageAtomicMax(gimage3D image,ivec3 P,int data); 
int imageAtomicMax(gimage2DRect image,ivec2 P,int data); 
int imageAtomicMax(gimageCube image,ivec3 P,int data); 
int imageAtomicMax(gbufferImage image,int P,int data); 
int imageAtomicMax(gimage1DArray image,ivec2 P,int data); 
int imageAtomicMax(gimage2DArray image,ivec3 P,int data); 
int imageAtomicMax(gimageCubeArray image,ivec3 P,int data); 
int imageAtomicMax(gimage2DMS image,ivec2 P,int sample,int data); 
int imageAtomicMax(gimage2DMSArray image,ivec3 P,int sample,int data); 
支持版本:4.20 4.30 4.40 4.50 
描述:imageAtomicMax — atomically compute the minimum of a value with an existing value in memory, store that value and return the original value
适用范围:计算着色器等
}}
imageAtomicMin{{
类型:图像操作函数
原型:
uint imageAtomicMin(gimage1D image,int P,uint data);  
uint imageAtomicMin(gimage2D image,ivec2 P,uint data);  
uint imageAtomicMin(gimage3D image,ivec3 P,uint data);  
uint imageAtomicMin(gimage2DRect image,ivec2 P,uint data);  
uint imageAtomicMin(gimageCube image,ivec3 P,uint data);  
uint imageAtomicMin(gbufferImage image,int P,uint data);  
uint imageAtomicMin(gimage1DArray image,ivec2 P,uint data);  
uint imageAtomicMin(gimage2DArray image,ivec3 P,uint data);  
uint imageAtomicMin(gimageCubeArray image,ivec3 P,uint data);  
uint imageAtomicMin(gimage2DMS image,ivec2 P,int sample,uint data);  
uint imageAtomicMin(gimage2DMSArray image,ivec3 P,int sample,uint data);  
int imageAtomicMin(gimage1D image,int P,int data);  
int imageAtomicMin(gimage2D image,ivec2 P,int data);  
int imageAtomicMin(gimage3D image,ivec3 P,int data);  
int imageAtomicMin(gimage2DRect image,ivec2 P,int data);  
int imageAtomicMin(gimageCube image,ivec3 P,int data);  
int imageAtomicMin(gbufferImage image,int P,int data);  
int imageAtomicMin(gimage1DArray image,ivec2 P,int data);  
int imageAtomicMin(gimage2DArray image,ivec3 P,int data);  
int imageAtomicMin(gimageCubeArray image,ivec3 P,int data);  
int imageAtomicMin(gimage2DMS image,ivec2 P,int sample,int data);  
int imageAtomicMin(gimage2DMSArray image,ivec3 P,int sample,int data); 
支持版本:4.20 4.30 4.40 4.50 
描述:imageAtomicMin — atomically compute the minimum of a value with an existing value in memory, store that value and return the original value
适用范围:计算着色器等
}}
imageAtomicOr{{
类型:图像操作函数
原型:
uint imageAtomicOr(gimage1D image, int P, uint data);
uint imageAtomicOr(gimage2D image, ivec2 P, uint data);
uint imageAtomicOr(gimage3D image, ivec3 P, uint data);
uint imageAtomicOr(gimage2DRect image, ivec2 P, uint data);
uint imageAtomicOr(gimageCube image, ivec3 P, uint data);
uint imageAtomicOr(gbufferImage image, int P, uint data);
uint imageAtomicOr(gimage1DArray image, ivec2 P, uint data);
uint imageAtomicOr(gimage2DArray image, ivec3 P, uint data);
uint imageAtomicOr(gimageCubeArray image, ivec3 P, uint data);
uint imageAtomicOr(gimage2DMS image, ivec2 P, int sample, uint data);
uint imageAtomicOr(gimage2DMSArray image, ivec3 P, int sample, uint data);
int imageAtomicOr(gimage1D image, int P, int data);
int imageAtomicOr(gimage2D image, ivec2 P, int data);
int imageAtomicOr(gimage3D image, ivec3 P, int data);
int imageAtomicOr(gimage2DRect image, ivec2 P, int data);
int imageAtomicOr(gimageCube image, ivec3 P, int data);
int imageAtomicOr(gbufferImage image, int P, int data);
int imageAtomicOr(gimage1DArray image, ivec2 P, int data);
int imageAtomicOr(gimage2DArray image, ivec3 P, int data);
int imageAtomicOr(gimageCubeArray image, ivec3 P, int data);
int imageAtomicOr(gimage2DMS image, ivec2 P, int sample, int data);
int imageAtomicOr(gimage2DMSArray image, ivec3 P, int sample, int data);
支持版本:4.20 4.30 4.40 4.50 
描述:imageAtomicOr — atomically compute the logical OR of a value with an existing value in memory, store that value and return the original value
适用范围:计算着色器等
}}
imageAtomicXor{{
类型:图像操作函数
原型:
uint imageAtomicXor(gimage1D image, int P, uint data);
uint imageAtomicXor(gimage2D image, ivec2 P, uint data);
uint imageAtomicXor(gimage3D image, ivec3 P, uint data);
uint imageAtomicXor(gimage2DRect image, ivec2 P, uint data);
uint imageAtomicXor(gimageCube image, ivec3 P, uint data);
uint imageAtomicXor(gbufferImage image, int P, uint data);
uint imageAtomicXor(gimage1DArray image, ivec2 P, uint data);
uint imageAtomicXor(gimage2DArray image, ivec3 P, uint data);
uint imageAtomicXor(gimageCubeArray image, ivec3 P, uint data);
uint imageAtomicXor(gimage2DMS image, ivec2 P, int sample, uint data);
uint imageAtomicXor(gimage2DMSArray image, ivec3 P, int sample, uint data);
int imageAtomicXor(gimage1D image, int P, int data);
int imageAtomicXor(gimage2D image, ivec2 P, int data);
int imageAtomicXor(gimage3D image, ivec3 P, int data);
int imageAtomicXor(gimage2DRect image, ivec2 P, int data);
int imageAtomicXor(gimageCube image, ivec3 P, int data);
int imageAtomicXor(gbufferImage image, int P, int data);
int imageAtomicXor(gimage1DArray image, ivec2 P, int data);
int imageAtomicXor(gimage2DArray image, ivec3 P, int data);
int imageAtomicXor(gimageCubeArray image, ivec3 P, int data);
int imageAtomicXor(gimage2DMS image, ivec2 P, int sample, int data);
int imageAtomicXor(gimage2DMSArray image, ivec3 P, int sample, int data);
支持版本:4.20 4.30 4.40 4.50 
描述:imageAtomicXor — atomically compute the logical exclusive OR of a value with an existing value in memory, store that value and return the original value
适用范围:计算着色器等
}}
imageLoad{{
类型:图像操作函数
原型:
gvec4 imageLoad(gimage1D image, int P);
gvec4 imageLoad(gimage2D image, ivec2 P);
gvec4 imageLoad(gimage3D image, ivec3 P);
gvec4 imageLoad(gimage2DRect image, ivec2 P);
gvec4 imageLoad(gimageCube image, ivec3 P);
gvec4 imageLoad(gbufferImage image, int P);
gvec4 imageLoad(gimage1DArray image, ivec2 P);
gvec4 imageLoad(gimage2DArray image, ivec3 P);
gvec4 imageLoad(gimageCubeArray image, ivec3 P);
gvec4 imageLoad(gimage2DMS image, ivec2 P, int sample);
gvec4 imageLoad(gimage2DMSArray image, ivec3 P, int sample);
支持版本:4.20 4.30 4.40 4.50 
描述:imageLoad — load a single texel from an image
适用范围:计算着色器等
}}
imageSamples{{
类型:图像操作函数
原型:
int imageSamples(gimage2DMS image);
int imageSamples(gimage2DMSArray image);
支持版本:4.50 
描述:imageSamples — return the number of samples of an image
适用范围:计算着色器等
}}
imageSize{{
类型:图像操作函数
原型:
int imageSize(gimage1D image);
ivec2 imageSize(gimage2D image);
ivec3 imageSize(gimage3D image);
ivec2 imageSize(gimageCube image);
ivec3 imageSize(gimageCubeArray image);
ivec2 imageSize(gimageRect image);
ivec2 imageSize(gimage1DArray image);
ivec3 imageSize(gimage2DArray image);
int imageSize(gimageBuffer image);
ivec2 imageSize(gimage2DMS image);
ivec3 imageSize(gimage2DMSArray image);
支持版本:4.30 4.40 4.50 
描述:imageSize — retrieve the dimensions of an image
适用范围:计算着色器等
}}
imageStore{{
类型:图像操作函数
原型:
void imageStore(gimage1D image, int P, gvec4 data);
void imageStore(gimage2D image, ivec2 P, gvec4 data);
void imageStore(gimage3D image, ivec3 P, gvec4 data);
void imageStore(gimage2DRect image, ivec2 P, gvec4 data);
void imageStore(gimageCube image, ivec3 P, gvec4 data);
void imageStore(gbufferImage image, int P, gvec4 data);
void imageStore(gimage1DArray image, ivec2 P, gvec4 data);
void imageStore(gimage2DArray image, ivec3 P, gvec4 data);
void imageStore(gimageCubeArray image, ivec3 P, gvec4 data);
void imageStore(gimage2DMS image, ivec2 P, int sample, gvec4 data);
void imageStore(gimage2DMSArray image, ivec3 P, int sample, gvec4 data);
支持版本:4.20 4.30 4.40 4.50 
描述:imageStore — write a single texel into an image
适用范围:计算着色器等
}}
atomicAdd{{
类型:原子操作函数
原型:
int atomicAdd(inout int mem, int data);
uint atomicAdd(inout uint mem, uint data);
支持版本:4.30 4.40 4.50 
描述:atomicAdd — perform an atomic addition to a variable
适用范围:计算着色器
}}
atomicAnd{{
类型:原子操作函数
原型:
int atomicAnd(inout int mem, int data);
uint atomicAnd(inout uint mem, uint data);
支持版本:4.30 4.40 4.50 
描述:atomicAnd — perform an atomic logical AND operation to a variable
适用范围:计算着色器
}}
atomicCompSwap{{
类型:原子操作函数
原型:
int atomicCompSwap(inout int mem, uint compare, uint data);
uint atomicCompSwap(inout uint mem, uint compare, uint data);
支持版本:4.30 4.40 4.50 
描述:atomicCompSwap — perform an atomic compare-exchange operation to a variable
适用范围:计算着色器
}}
atomicCounter{{
类型:原子操作函数
原型:
uint atomicCounter(atomic_uint c);
支持版本:4.20 4.30 4.40 4.50 
描述:atomicCounter — return the current value of an atomic counter
适用范围:计算着色器
}}
atomicCounterDecrement{{
类型:原子操作函数
原型:
uint atomicCounterDecrement(atomic_uint c);
支持版本:4.20 4.30 4.40 4.50 
描述:atomicCounterDecrement — atomically decrement a counter and return its new value
适用范围:计算着色器
}}
atomicCounterIncrement{{
类型:原子操作函数
原型:
uint atomicCounterIncrement(atomic_uint c);
支持版本:4.20 4.30 4.40 4.50 
描述:atomicCounterIncrement — atomically increment a counter and return the prior value
适用范围:计算着色器
}}
atomicExchange{{
类型:原子操作函数
原型:
int atomicExchange(inout int mem, int data);
uint atomicExchange(inout uint mem, uint data);
支持版本:4.30 4.40 4.50 
描述:atomicExchange — perform an atomic exchange operation to a variable
适用范围:计算着色器
}}
atomicMax{{
类型:原子操作函数
原型:
int atomicMax(inout int mem, int data);
uint atomicMax(inout uint mem, uint data);
支持版本:4.30 4.40 4.50 
描述:atomicMax — perform an atomic max operation to a variable
适用范围:计算着色器
}}
atomicMin{{
类型:原子操作函数
原型:
int atomicMin(inout int mem, int data);
uint atomicMin(inout uint mem, uint data);
支持版本:4.30 4.40 4.50 
描述:atomicMin — perform an atomic min operation to a variable
适用范围:计算着色器
}}
atomicOr{{
类型:原子操作函数
原型:
int atomicOr(inout int mem, int data);
uint atomicOr(inout uint mem, uint data);
支持版本:4.30 4.40 4.50 
描述:atomicOr — perform an atomic logical OR operation to a variable
适用范围:计算着色器
}}
atomicXor{{
类型:原子操作函数
原型:
int atomicXor(inout int mem, int data);
uint atomicXor(inout uint mem, uint data);
支持版本:4.30 4.40 4.50 
描述:atomicXor — perform an atomic logical exclusive OR operation to a variable
适用范围:计算着色器
}}
barrier{{
类型:访存屏障同步原语
原型:
void barrier(void);
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:barrier — synchronize execution of multiple shader invocations
适用范围:计算着色器等
}}
groupMemoryBarrier{{
类型:访存屏障同步原语
原型:
void groupMemoryBarrier(void); 
支持版本:4.30 4.40 4.50 
描述:groupMemoryBarrier — controls the ordering of memory transaction issued shader invocation relative to a work group
适用范围:计算着色器
}}
memoryBarrier{{
类型:访存屏障同步原语
原型:
uint memoryBarrier(void);
支持版本:4.00 4.10 4.20 4.30 4.40 4.50 
描述:memoryBarrier — controls the ordering of memory transactions issued by a single shader invocation
适用范围:计算着色器
}}
memoryBarrierAtomicCounter{{
类型:访存屏障同步原语
原型:
void memoryBarrierAtomicCounter(void);
支持版本:4.30 4.40 4.50 
描述:memoryBarrierAtomicCounter — controls the ordering of operations on atomic counters issued by a single shader invocation
适用范围:计算着色器
}}
memoryBarrierBuffer{{
类型:访存屏障同步原语
原型:
void memoryBarrierBuffer(void);
支持版本:4.30 4.40 4.50 
描述:memoryBarrierBuffer — controls the ordering of operations on buffer variables issued by a single shader invocation
适用范围:计算着色器
}}
memoryBarrierImage{{
类型:访存屏障同步原语
原型:
void memoryBarrierImage(void);
支持版本:4.30 4.40 4.50 
描述:memoryBarrierImage — controls the ordering of operations on image variables issued by a single shader invocation
适用范围:计算着色器
}}
memoryBarrierShared{{
类型:访存屏障同步原语
原型:
void memoryBarrierShared(void);
支持版本:4.30 4.40 4.50 
描述:memoryBarrierShared — controls the ordering of operations on shared variables issued by a single shader invocation
适用范围:计算着色器
}}