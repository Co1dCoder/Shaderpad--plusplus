GL_ES{{
如果当前是在 OPGL ES 环境中运行则 GL_ES 被设置成1,一般用来检查当前环境是不是 OPENGL ES.
}}
GL_FRAGMENT_PRECISION_HIGH{{
如果当前系统glsl的片元着色器支持高浮点精度,则设置为1.一般用于检查着色器精度.
}}
__LINE__{{
当前源码中的行号.
}}
__VERSION__{{
一个整数,指示当前的glsl版本 比如 100 ps: 100 = v1.00
}}
__FILE__{{
当前处理的原字符编号.
}}
attribute{{
只能存在于vertex shader中,一般用于保存顶点或法线数据,它可以在数据缓冲区中读取数据
}}
binding{{
布局标识符,设置绑定点，例:
layout(std140, binding = 2) uniform Lights { ... };
}}
bool{{
布尔数据类型,true为真,false为假,同c/c++语言.
}}
break{{
同c/c++语言,终止循环体的运行,并且继续执行循环体外的内容.
}}
bvec2{{
bool类型的vec2
}}
bvec3{{
bool类型的vec3
}}
bvec4{{
bool类型的vec4
}}
column_major{{
使用列主序的方式来存储uniform块中的矩阵.
}}
const{{
常量修饰词
}}
continue{{
同c/c++语言,跳过当前循环,进入下一次循环.
}}
core{{
用于#version xxx core 指定核心版本.
}}
default{{
同c/c++语言,用于switch语句.
}}
define{{
预编译指令,同c语言,控制常量与宏的定义.
}}
discard{{
片元着色器中一种特殊的控制流discard. 使用discard会退出片段着色器,不执行后面的片段着色操作.片段也不会写入帧缓冲区。
}}
dmat2{{
doublue类型的2x2矩阵,列主序.
}}
dmat2x2{{
doublue类型的2x2矩阵,列主序.
}}
dmat2x3{{
doublue类型的2x3矩阵,列主序.
}}
dmat2x4{{
doublue类型的2x4矩阵,列主序.
}}
dmat3{{
doublue类型的3x3矩阵,列主序.
}}
dmat3x2{{
doublue类型的3x2矩阵,列主序.
}}
dmat3x3{{
doublue类型的3x3矩阵,列主序.
}}
dmat3x4{{
doublue类型的3x4矩阵,列主序.
}}
dmat4{{
doublue类型的4x4矩阵,列主序.
}}
dmat4x2{{
doublue类型的4x2矩阵,列主序.
}}
dmat4x3{{
doublue类型的4x3矩阵,列主序.
}}
dmat4x4{{
doublue类型的4x4矩阵,列主序.
}}
do{{
do{..}while()语句,同c/c++语言.
}}
double{{
同c/c++语言,双精度浮点数.
}}
dvec2{{
double类型的vec2.
}}
dvec3{{
double类型的vec3.
}}
dvec4{{
double类型的vec4.
}}
elif{{
预编译指令,即else if.
}}
else{{
分支控制指令,同c/c++语言.
}}
endif{{
预编译指令，同c/c++语言.
}}
error{{
预编译指令,用法#error text
强制编译器将text文字内容(知道第一个换行符为止)插入到着色器的信息日志中.
}}
extension{{
预编译指令,设置编译器支持特定的GLSL扩张功能.
}}
false{{
假,布尔常量,同c/c++语言.
}}
float{{
单精度浮点数,同c/c++语言.
}}
for{{
for循环指令,同c/c++语言.
}}
highp{{
变量的精度说明,highp是高精度.
}}
if{{
分支控制指令,同c/c++语言.
}}
ifdef{{
预编译指令,同c/c++语言.
}}
ifndef{{
预编译指令,同c/c++语言.
}}
in{{
值传递声明,设置这个变量为着色器阶段的输入变量.
}}
invariant{{
由于shader在编译时会进行一些内部优化,可能会导致同样的运算在不同shader里结果不一定精确相等.这会引起一些问题,尤其是vertx shader向fragmeng shader传值的时候. 所以我们需要使用invariant 关键字来显式要求计算结果必须精确一致. 当然我们也可使用 #pragma STDGL invariant(all)来命令所有输出变量必须精确一致, 但这样会限制编译器优化程度,降低性能.
#pragma STDGL invariant(all) //所有输出变量为 invariant
invariant varying texCoord; //varying在传递数据的时候声明为invariant
}}
ivec2{{
int类型的vec2.
}}
ivec3{{
int类型的vec3.
}}
ivec4{{
int类型的vec4.
}}
line{{
预编译指令,设置诊断行号.
}}
lowp{{
变量的精度说明,lowp是低精度.
}}
main{{
同c/c++,返回类型为void,入口函数.
}}
mat2{{
float类型的2x2矩阵,列主序.
}}
mat2x2{{
float类型的2x2矩阵,列主序.
}}
mat2x3{{
float类型的2x3矩阵,列主序.
}}
mat2x4{{
float类型的2x4矩阵,列主序.
}}
mat3{{
float类型的3x3矩阵,列主序.
}}
mat3x2{{
float类型的3x2矩阵,列主序.
}}
mat3x3{{
float类型的3x3矩阵,列主序.
}}
mat3x4{{
float类型的3x4矩阵,列主序.
}}
mat4{{
float类型的4x4矩阵,列主序.
}}
mat4x2{{
float类型的4x2矩阵,列主序.
}}
mat4x3{{
float类型的4x3矩阵,列主序.
}}
mat4x4{{
float类型的4x4矩阵,列主序.
}}
mediump{{
变量的精度说明,mediump是中等精度.
}}
none{{
变量修饰符,(默认的可省略)本地变量,可读可写,函数的输入参数既是这种类型.
}}
out{{
设置这个变量为着色器阶段的输出变量.
}}
inout{{
将数据拷贝到函数中,并且返回函数中修改的数据.
}}
pragma{{
预编译指令,控制编译器的特定选项.
}}
precision{{
精度,例:
precision mediump float;
}}
return{{
从当前子例程返回,可以带有一个函数返回值(返回值必须与函数声明返回类型相符),同c/c++语言.
}}
row_major{{
使用行主序的方式来设置uniform块中的矩阵.
}}
struct{{
结构体修饰词,同c/c++语言.
}}
switch{{
switch分支控制语句,与case配合使用,同c/c++语言.
}}
case{{
switch分支控制语句,与case配合使用,同c/c++语言.
}}
true{{
真,布尔常量,同c/c++语言.
}}
uint{{
无符号整数,同c/c++语言.
}}
undef{{
预编译指令,同c语言,控制常量与宏的定义.
}}
uniform{{
变量修饰词,在运行时shader无法改变uniform变量, 一般用来放置程序传递给shader的变换矩阵，材质，光照参数等等.
它修饰的变量是全局且只读的,在整个shader执行完毕前其值不会改变,他可以和任意基本类型变量组合, 一般我们使用uniform变量来放置外部程序传递来的环境数据(如点光源位置,模型的变换矩阵等等) 这些数据在运行中显然是不需要被改变的.
}}
uvec2{{
uint类型的vec2.
}}
uvec3{{
uint类型的vec3.
}}
uvec4{{
uint类型的vec4.
}}
varying{{
变量修饰词,主要负责在vertex 和 fragment 之间传递变量
varying类型变量是 vertex shader 与 fragment shader 之间的信使,一般我们在 vertex shader 中修改它然后在fragment shader使用它,但不能在 fragment shader中修改它.
}}
vec2{{
float类型的vec2.
}}
vec3{{
float类型的vec3.
}}
vec4{{
float类型的vec4.
}}
version{{
预编译指令,指定当前shader使用的glsl版本.
比如 #version 100 他的意思是规定当前shader使用 GLSL ES 1.00标准进行编译.
如果使用这条预编译指令,则他必须出现在程序的最开始位置.
}}
void{{
无参数类型,同c/c++语言.
}}
while{{
循环语句,同c/c++语言.
}}
int{{
有符号32位整数.
}}
buffer{{
设置应用程序共享的一块可读写的内存，这块内存也作为着色器中的存储缓存使用.
}}
shared{{
设置变量是本地工作组(local work group)中共享的。它只能用于计算着色器中.
}}
precise{{
如果必须保证某个表达式产生的结果是一致的,即使表达式中的数据发生了变化也是如此,那么此时我们应该使用precise而非invariant.
}}
packed{{
设置uniform块占用最小的内存空间,但这样会进制程序间共享这个块.
}}
std140{{
使用标准布局方式来设置uniform块或者着色器存储的buffer块.
}}
std430{{
使用标准布局方式来设置buffer块.
}}
local_size_x{{
输入布局限定符在计算着色器中声明本地工作组的大小，分别使用local_size_x、local_size_y以及local_size_z，它们的默认值都是1。举例来说如果忽略local_size_z，就会创建N * M的2维组。比如在例子12.1中就声明了一个本地工作组大小为16 * 16的着色器。
}}
local_size_y{{
输入布局限定符在计算着色器中声明本地工作组的大小，分别使用local_size_x、local_size_y以及local_size_z，它们的默认值都是1。举例来说如果忽略local_size_z，就会创建N * M的2维组。比如在例子12.1中就声明了一个本地工作组大小为16 * 16的着色器。
}}
local_size_z{{
输入布局限定符在计算着色器中声明本地工作组的大小，分别使用local_size_x、local_size_y以及local_size_z，它们的默认值都是1。举例来说如果忽略local_size_z，就会创建N * M的2维组。比如在例子12.1中就声明了一个本地工作组大小为16 * 16的着色器。
}}
layout{{
这个关键字用于一个具体变量前,用于显式标明该变量的一些布局属性.
例:
#version 330    
layout(location = 0) in vec3 attrib_position;   
这里就是显式设定了该变量的位置值(location)。
}}
points{{
几何着色器的图元类型之一.
例:
layout (triangles) in;
layout (triangle_strip, max_vertices = 3)out;
几何着色器支持的图元类型包括:points,lines,triangles,line_adjacency,triangle_strip,triangles_adjacency.
}}
lines{{
几何着色器的图元类型之一.
例:
layout (triangles) in;
layout (triangle_strip, max_vertices = 3)out;
几何着色器支持的图元类型包括:points,lines,triangles,line_adjacency,triangle_strip,triangles_adjacency.
}}
lines_adjacency{{
几何着色器的图元类型之一.
例:
layout (triangles) in;
layout (triangle_strip, max_vertices = 3)out;
几何着色器支持的图元类型包括:points,lines,triangles,line_adjacency,triangle_strip,triangles_adjacency.
}}
triangles{{
几何着色器的图元类型之一.
例:
layout (triangles) in;
layout (triangle_strip, max_vertices = 3)out;
几何着色器支持的图元类型包括:points,lines,triangles,line_adjacency,triangle_strip,triangles_adjacency.
}}
triangle_strip{{
几何着色器的图元类型之一.
例:
layout (triangles) in;
layout (triangle_strip, max_vertices = 3)out;
几何着色器支持的图元类型包括:points,lines,triangles,line_adjacency,triangle_strip,triangles_adjacency.
}}
triangles_adjacency{{
几何着色器的图元类型之一.
例:
layout (triangles) in;
layout (triangle_strip, max_vertices = 3)out;
几何着色器支持的图元类型包括:points,lines,triangles,line_adjacency,triangle_strip,triangles_adjacency.
}}
max_vertices{{
用于几何着色器中指定输出的最大顶点数，例:
layout (triangles) in;
layout (triangle_strip, max_vertices = 30)out;
max_vertices也有上限,它的最大值是与设备实现相关的.
}}
stream{{
布局限定符,可以全局设置,或者给接口块设置，或者给单一的输出变量设置.
用于几何着色器中声明输出的顶点数据流,每个stream流都要设置一个从0开始的数字,可用流的最大值是与设备实现相关的.
}}
location{{
用layout指定位置.
不再需要查询输入变量(attribute)的location的方式,可以使用layout去指定位置
}}
rgba32f{{
32位浮点数的rgba格式.
}}
imageBuffer{{
图像数据缓冲.
}}